//------------------------------------------------------------------------------
// <auto-generated>
//     Ce code a été généré à partir d'un modèle.
//
//     Des modifications manuelles apportées à ce fichier peuvent conduire à un comportement inattendu de votre application.
//     Les modifications manuelles apportées à ce fichier sont remplacées si le code est régénéré.
// </auto-generated>
//------------------------------------------------------------------------------

namespace PaquetWorld
{
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Windows;

    public partial class Monde
    {
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Usage", "CA2214:DoNotCallOverridableMethodsInConstructors")]
        public Monde()
        {
            this.Classes = new HashSet<Classe>();
            this.Heros = new HashSet<Hero>();
            this.Items = new HashSet<Item>();
            this.Monstres = new HashSet<Monstre>();
            this.ObjetMondes = new HashSet<ObjetMonde>();
        }
    
        public int Id { get; set; }
        public string Description { get; set; }
        public int LimiteX { get; set; }
        public int LimiteY { get; set; }
    
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Usage", "CA2227:CollectionPropertiesShouldBeReadOnly")]
        public virtual ICollection<Classe> Classes { get; set; }
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Usage", "CA2227:CollectionPropertiesShouldBeReadOnly")]
        public virtual ICollection<Hero> Heros { get; set; }
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Usage", "CA2227:CollectionPropertiesShouldBeReadOnly")]
        public virtual ICollection<Item> Items { get; set; }
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Usage", "CA2227:CollectionPropertiesShouldBeReadOnly")]
        public virtual ICollection<Monstre> Monstres { get; set; }
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Usage", "CA2227:CollectionPropertiesShouldBeReadOnly")]
        public virtual ICollection<ObjetMonde> ObjetMondes { get; set; }

        #region Méthodes
        /// <summary>
        /// Auteur: Sébastien Paquet
        /// Description: Méthode qui crée un monde
        /// Date: 22-09-2017
        /// </summary>
        /// <param name="sDescription">Variable qui prend la description du monde</param>
        /// <param name="iLimiteX">Variable qui prend la grandeur horizontale (x) du monde</param>
        /// <param name="iLimiteY">Variable qui prend la grandeur verticale (y) du monde</param>
        public static void CreerMonde(string sDescription, int iLimiteX, int iLimiteY)
        {
            using (Entities context = new Entities())
            {
                try
                {
                    Monde md1 = new Monde();
                    md1.Description = sDescription;
                    md1.LimiteX = iLimiteX;
                    md1.LimiteY = iLimiteY;
                    context.Mondes.Add(md1);
                    context.SaveChanges();
                    MessageBox.Show("Monde à bien été créé", "Création réussi");
                }
                catch (Exception e)
                {
                    MessageBox.Show(e.Message);
                }
            }
        }

        /// <summary>
        /// Auteur: Sébastien Paquet
        /// Description: Méthode qui supprime un monde 
        /// Date:22-09-2017
        /// </summary>
        /// <param name="iIdMonde"> Variable qui prend l'id du monde</param>
        public static void SupprimerMonde(int iIdMonde)
        {
            using (Entities context = new Entities())
            {
                try
                {
                    Monde md1 = context.Mondes.First(md => md.Id == iIdMonde);
                    context.Mondes.Remove(md1);
                    context.SaveChanges();
                    MessageBox.Show("Le monde id (" + iIdMonde + ") a été supprimer", "Suppression réussi");
                }
                catch (Exception e)
                {
                    if(e.HResult == -2146233079)
                    {
                        MessageBox.Show("l'id (" + iIdMonde + ") du monde n'exite pas", "Id invalide", MessageBoxButton.OK, MessageBoxImage.Error);
                    }
                    else
                    {
                        MessageBox.Show(e.Message);
                    }
                }
            }
        }

        /// <summary>
        /// Auteur: Sébastien Paquet
        /// Description: Méthode qui modifie un monde
        /// Date:22-09-2017
        /// </summary>
        /// <param name="iIdmonde">Variable qui prend le id du monde</param>
        /// <param name="sDescription">Variable qui prend la nouvelle description</param>
        /// <param name="iLimiteX">Variable qui prend la nouvelle limite horizontale(x) du monde</param>
        /// <param name="iLimiteY">Variable qui prend la nouvelle limite verticale(y) du monde</param>
        public static void ModifierMonde(int iIdmonde, string sDescription, int iLimiteX, int iLimiteY)
        {
            using (Entities context = new Entities())
            {
                try
                {
                    Monde md1 = context.Mondes.First(md => md.Id == iIdmonde);
                    md1.Description = sDescription;
                    md1.LimiteX = iLimiteX;
                    md1.LimiteY = iLimiteY;
                    context.SaveChanges();
                    MessageBox.Show("Le monde id (" + iIdmonde + ") a été modifier", "Modification réussi");
                }
                catch (Exception e)
                {
                    if (e.HResult == -2146233079)
                    {
                        MessageBox.Show("l'id (" + iIdmonde + ") du monde n'exite pas", "Id invalide", MessageBoxButton.OK, MessageBoxImage.Error);
                    }
                    else
                    {
                        MessageBox.Show(e.Message);
                    }
                }
            }
        }

        /// <summary>
        /// Auteur:Sébastien Paquet
        /// Description: Métode qui affiche tous les mondes
        /// Date:22-09-2017
        /// </summary>
        public static void AfficherListeMonde()
        {
            using (Entities context = new Entities())
            {
                try
                {
                    var req = context.Mondes.Where(ms => ms.Id >= 0);
                    foreach (Monde md in req)
                    {
                        MainWindow.txttext.AppendText("Id : " + md.Id + "- Description : " + md.Description + "- Limite X : " + md.LimiteX + "- Limite Y : " + md.LimiteY + "\n");

                    }
                }
                catch (Exception e)
                {
                    MessageBox.Show(e.Message);
                }
            }
        }
        #endregion
    }
}
